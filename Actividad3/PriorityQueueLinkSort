package actividad3;

public class PriorityQueueLinkSort<E, N extends Comparable<N>> implements PriorityQueue<E, N> {

    private static class EntryNode<E, N> {
        E data;
        N priority;
        EntryNode(E data, N priority) {
            this.data = data;
            this.priority = priority;
        }
    }

    private Node<EntryNode<E, N>> first;
    private Node<EntryNode<E, N>> last;

    public PriorityQueueLinkSort() {
        first = null;
        last = null;
    }
public void enqueue(E x, N pr) {
        EntryNode<E, N> entry = new EntryNode<>(x, pr);
        Node<EntryNode<E, N>> newNode = new Node<>(entry);
        if (isEmpty()) {
            first = last = newNode;
        } else if (pr.compareTo(first.getData().priority) > 0) {
            newNode.setNext(first);
            first = newNode;
        } else {
            Node<EntryNode<E, N>> current = first;
            while (current.getNext() != null && pr.compareTo(current.getNext().getData().priority) <= 0) {
                current = current.getNext();
            }
            newNode.setNext(current.getNext());
            current.setNext(newNode);
            if (newNode.getNext() == null) last = newNode;
        }
    }
    public E dequeue() throws ExceptionIsEmpty {
        if (isEmpty()) throw new ExceptionIsEmpty("Queue is empty");
        E data = first.getData().data;
        first = first.getNext();
        if (first == null) last = null;
        return data;
    }

    public E front() throws ExceptionIsEmpty {
        if (isEmpty()) throw new ExceptionIsEmpty("Queue is empty");
        return first.getData().data;
    }

    public E back() throws ExceptionIsEmpty {
        if (isEmpty()) throw new ExceptionIsEmpty("Queue is empty");
        return last.getData().data;
    }