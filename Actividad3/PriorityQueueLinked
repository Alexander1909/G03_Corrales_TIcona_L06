package ejercicio3;
import actividad2.QueueLink;  // reutilizamos cola ya hecha

public class PriorityQueueLinked<E> implements PriorityQueue<E> {
    private QueueLink<E>[] queues;

    @SuppressWarnings("unchecked")
    public PriorityQueueLinked(int n) {
        queues = new QueueLink[n];
        for (int i = 0; i < n; i++) {
            queues[i] = new QueueLink<>();
        }
    }

    public void enqueue(E x, int p) {
        queues[p].enqueue(x);
    }

    public E dequeue() throws ExceptionIsEmpty {
        for (int i = queues.length - 1; i >= 0; i--) {
            if (!queues[i].isEmpty()) return queues[i].dequeue();
        }
        throw new ExceptionIsEmpty("Queue is empty");
    }
    public E front() throws ExceptionIsEmpty {
        for (int i = queues.length - 1; i >= 0; i--) {
            if (!queues[i].isEmpty()) return queues[i].front();
        }
        throw new ExceptionIsEmpty("Queue is empty");
    }

    public E back() throws ExceptionIsEmpty {
        for (int i = 0; i < queues.length; i++) {
            if (!queues[i].isEmpty()) return queues[i].back();
        }
        throw new ExceptionIsEmpty("Queue is empty");
    }

    public boolean isEmpty() {
        for (QueueLink<E> q : queues) {
            if (!q.isEmpty()) return false;
        }
        return true;
    }
     public String toString() {
        StringBuilder sb = new StringBuilder("PriorityQueue: ");
        for (int i = queues.length - 1; i >= 0; i--) {
            sb.append("P").append(i).append("=").append(queues[i]).append(" ");
        }
        return sb.toString();
    }
}