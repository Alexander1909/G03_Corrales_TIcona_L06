package ejercicio2;
public class QueueArray<E> implements Queue<E> {
    private E[] array;
    private int first, last, count;

    @SuppressWarnings("unchecked")
    public QueueArray(int size) {
        array = (E[]) new Object[size];
        first = 0;
        last = -1;
        count = 0;
    }

    public void enqueue(E x) {
        if (count == array.length) throw new RuntimeException("Queue is full");
        last = (last + 1) % array.length;
        array[last] = x;
        count++;
    }
    public E dequeue() throws ExceptionIsEmpty {
        if (isEmpty()) throw new ExceptionIsEmpty("Queue is empty");
        E data = array[first];
        first = (first + 1) % array.length;
        count--;
        return data;
    }

    public E front() throws ExceptionIsEmpty {
        if (isEmpty()) throw new ExceptionIsEmpty("Queue is empty");
        return array[first];
    } 
    public E back() throws ExceptionIsEmpty {
        if (isEmpty()) throw new ExceptionIsEmpty("Queue is empty");
        return array[last];
    }

    public boolean isEmpty() {
        return count == 0;
    }

    public String toString() {
        StringBuilder sb = new StringBuilder("Queue: ");
        for (int i = 0; i < count; i++) {
            sb.append(array[(first + i) % array.length]).append(" ");
        }
        return sb.toString();
    }
}